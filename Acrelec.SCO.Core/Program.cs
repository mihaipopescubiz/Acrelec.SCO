using Acrelec.SCO.Core.Helpers;
using Acrelec.SCO.Core.Interfaces;
using Acrelec.SCO.Core.Managers;
using Acrelec.SCO.Core.Model.RestExchangedMessages;
using Acrelec.SCO.Core.Providers;
using Acrelec.SCO.DataStructures;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using System.Threading.Tasks;

namespace Acrelec.SCO.Core
{
    class Program
    {
        private static List<POSItem> posItems = null;
        private static HttpClient client = new HttpClient();
        static async Task Main(string[] args)
        {
            Console.WriteLine("SCO - Self Check Out System");
            client.BaseAddress = new Uri("http://localhost:5000/");
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            //init
            IItemsProvider itemsProvider = new ItemsProvider();
            IOrderManager orderManager = new OrderManager(itemsProvider, client);
            
            //
            posItems = itemsProvider.AvailablePOSItems;

            //list POS items - [Developer note: I assumed that i should list available items.]
            ListAllItems();
            //todo - check if server is available for order injection
            if(!await CheckIfServerAvailable())
            {
                Console.Write("Server not available. Closing program...");
                Console.ReadLine();
                return;
            }

            //todo - create an order containing the following items:
            //1*Coke
            //2*Water


            var newOrder = new Order();
            AddOrderItem(newOrder, "Coke", 1);
            AddOrderItem(newOrder, "Water", 2);
            //...            

            //inject the order to POS
            var assignedOrderNumber = await orderManager.InjectOrderAsync(newOrder);

            if (!string.IsNullOrEmpty(assignedOrderNumber))
                Console.WriteLine("Order injected with success");
            else
                Console.WriteLine("Error injecting order");

            Console.ReadLine();
        }

        /// <summary>
        /// list in Console all items (with all their properties)
        /// </summary>
        private static void ListAllItems()
        {
            foreach(POSItem item in posItems)
            {
                Console.WriteLine($"Name: {item.Name} | Code: {item.ItemCode} | Short code: {item.Name.GetShortCode()} | Available : {item.IsAvailable} | Unit price: {item.UnitPrice}");
            }
            //todo - list items and for each item a short code generated by the POSItemExtensions
        }

        private static string GetItemCode(string name)
        {
            return posItems.FirstOrDefault(item => item.Name.ToLower() == name.ToLower())?.Name ?? string.Empty;
        }

        private static void AddOrderItem(Order order, string itemName, int quantity)
        {
            if (order == null) return;

            var itemCode = GetItemCode(itemName);

            if (string.IsNullOrEmpty(itemCode)) return;

            order.OrderItems.Add(new OrderedItem() { ItemCode = itemCode, Qty = quantity });
        }

        private static async Task<bool> CheckIfServerAvailable()
        {
            CheckAvailabilityResponse checkAvailability = null;
            try
            {
                HttpResponseMessage response = await client.GetAsync("/api-sco/v1/availability");
                if (response.IsSuccessStatusCode)
                {
                    var checkAvailabilityTask = await response.Content.ReadAsStringAsync();
                    checkAvailability = JsonSerializer.Deserialize<CheckAvailabilityResponse>(checkAvailabilityTask,
                        new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true
                        });
                }
                return checkAvailability?.CanInjectOrders ?? false;
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex.Message);
                Console.WriteLine(ex.StackTrace);
                return false;
            }
        }
    }
}
